[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: J:/youtube-dl/What is a stack and how does it work_ — 6502 part 5.mp4
Video File: J:/youtube-dl/What is a stack and how does it work_ — 6502 part 5.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 15
Active Line: 41
Video Position: 11521

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: Sarasa Gothic,等距更纱黑体 T SC,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.42,0:00:04.08,Sarasa Gothic,,0,0,0,,I built a simple computer and wrote a program to print hello world on the screen
Dialogue: 0,0:00:04.36,0:00:05.86,Sarasa Gothic,,0,0,0,, But the program is a bit of mess right now
Dialogue: 0,0:00:05.86,0:00:09.50,Sarasa Gothic,,0,0,0,,It's over 150 lines of assembly language just to print hello world
Dialogue: 0,0:00:09.84,0:00:14.18,Sarasa Gothic,,0,0,0,,and see printing character by character here...you know it's very repetitive
Dialogue: 0,0:00:14.18,0:00:17.98,Sarasa Gothic,,0,0,0,,because I just copy and pasted the code to print each character over and over again
Dialogue: 0,0:00:17.98,0:00:21.16,Sarasa Gothic,,0,0,0,,and then if we go all the way back up to the top. I am doing the same thing at the top here just to
Dialogue: 0,0:00:21.16,0:00:24.28,Sarasa Gothic,,0,0,0,,sent the instruction to get the display module set up in the first place
Dialogue: 0,0:00:24.70,0:00:32.24,Sarasa Gothic,,0,0,0,,so let's simplify this by moving this code here for sending an instruction into a subroutine that we could just call with a single line of code each time we need to
Dialogue: 0,0:00:32.78,0:00:38.40,Sarasa Gothic,,0,0,0,,so I'm gonna copy all of this and paste it way down here at the bottom of the program so this is all the way at the bottom and I will paste the same code
Dialogue: 0,0:00:39.64,0:00:43.92,Sarasa Gothic,,0,0,0,,and I will add a label here called lcd_instruction and expect I'll spell it right
Dialogue: 0,0:00:44.40,0:00:50.72,Sarasa Gothic,,0,0,0,,and I'm calling a Lcd instruction because this is the code that sends an instruction or whatever instruction in A register to the LCD module
Dialogue: 0,0:00:51.10,0:00:52.42,Sarasa Gothic,,0,0,0,,so back up to the top here
Dialogue: 0,0:00:53.08,0:00:58.38,Sarasa Gothic,,0,0,0,,here we're sending some instructions and we're loading the instruction into the A register and then
Dialogue: 0,0:00:59.00,0:01:05.94,Sarasa Gothic,,0,0,0,,instead of having all these code here we just say jsr, which has jumped to subroutine, LCD instruction
Dialogue: 0,0:01:05.94,0:01:13.10,Sarasa Gothic,,0,0,0,,so this will load the instruction into the A register and then jump down to the bottom here to this LCD instruction section here
Dialogue: 0,0:01:13.10,0:01:17.20,Sarasa Gothic,,0,0,0,,and execute all this code here which actually sends that instruction to the LCD
Dialogue: 0,0:01:17.24,0:01:21.94,Sarasa Gothic,,0,0,0,,then at the end of this we can say RTS, which means return from subroutine
Dialogue: 0,0:01:21.94,0:01:27.04,Sarasa Gothic,,0,0,0,,which will exit the subroutine and then jump back up wherever we came from, so if we go back to the top here
Dialogue: 0,0:01:27.26,0:01:31.74,Sarasa Gothic,,0,0,0,,that will jump here to where we just finish this jump subroutine instruction
Dialogue: 0,0:01:32.44,0:01:37.48,Sarasa Gothic,,0,0,0,,and the nice thing is that we can reuse that subroutine for each of the instructions we need to configure the LCD
Dialogue: 0,0:01:37.48,0:01:42.18,Sarasa Gothic,,0,0,0,,so instead of doing all this we get rid of that and say jsr lcd instruction
Dialogue: 0,0:01:42.18,0:01:48.68,Sarasa Gothic,,0,0,0,,and the same thing here this is another instruction we get rid of all that and add another jump to subroutine LCD instruction
Dialogue: 0,0:01:48.94,0:01:55.00,Sarasa Gothic,,0,0,0,,It's now... easier to follow this code because, here you know this is all the code to initialize the LCD module
Dialogue: 0,0:01:55.26,0:01:59.48,Sarasa Gothic,,0,0,0,,and you can check out my last video where I go into what each of these instructions do and what each of these bits are for
Dialogue: 0,0:01:59.48,0:02:04.20,Sarasa Gothic,,0,0,0,,but if you watched that video and know what these bits mean then hopefully this code is pretty clear about what it's doing
Dialogue: 0,0:02:04.44,0:02:07.70,Sarasa Gothic,,0,0,0,,and of course you know I've also got the comments over here which should help assuming they're correct
Dialogue: 0,0:02:08.24,0:02:11.34,Sarasa Gothic,,0,0,0,,and of course we can do the same thing for actually printing the letters
Dialogue: 0,0:02:11.84,0:02:15.38,Sarasa Gothic,,0,0,0,,so all of this code here prints the letter H from the A register
Dialogue: 0,0:02:15.50,0:02:18.88,Sarasa Gothic,,0,0,0,,so I am copying all that down into a subroutine down here at the bottom as well
Dialogue: 0,0:02:20.00,0:02:21.84,Sarasa Gothic,,0,0,0,,and I can call that "print_character"
Dialogue: 0,0:02:21.84,0:02:28.64,Sarasa Gothic,,0,0,0,,and it's pretty similar to the subroutine for the LCD instruction just we've got this register select bit set here
Dialogue: 0,0:02:29.28,0:02:35.52,Sarasa Gothic,,0,0,0,,but again at the end we need the return from subroutine instruction to exit the subroutine and go back up to the main program
Dialogue: 0,0:02:35.52,0:02:37.32,Sarasa Gothic,,0,0,0,,and so now we go back up here
Dialogue: 0,0:02:37.84,0:02:42.32,Sarasa Gothic,,0,0,0,,we could replace all of this with just a "jump to subroutine print character"
Dialogue: 0,0:02:42.90,0:02:46.34,Sarasa Gothic,,0,0,0,,and I'll go ahead and do that for each letter in the entire message
Dialogue: 0,0:02:46.44,0:02:52.54,Sarasa Gothic,,0,0,0,,you can see this is gonna significantly reduce the amount of code we need to send each letter since most of the code we start with
Dialogue: 0,0:02:52.76,0:02:58.62,Sarasa Gothic,,0,0,0,,was just repeating those same command to sent a letter to the display and now that's been factored out into that subroutine
Dialogue: 0,0:02:59.18,0:03:01.86,Sarasa Gothic,,0,0,0,,and now this is what we left with and it's a lot shorter
Dialogue: 0,0:03:02.04,0:03:04.54,Sarasa Gothic,,0,0,0,,and also I think a lot more clear of what it does
Dialogue: 0,0:03:04.76,0:03:10.16,Sarasa Gothic,,0,0,0,,and a thing with assembly language there is a direct core relation with machine code it runs
Dialogue: 0,0:03:10.16,0:03:12.16,Sarasa Gothic,,0,0,0,,so let's save this
Dialogue: 0,0:03:12.20,0:03:13.87,Sarasa Gothic,,0,0,0,,if we look at machine code we starting with
Dialogue: 0,0:03:13.87,0:03:15.87,Sarasa Gothic,,0,0,0,,
